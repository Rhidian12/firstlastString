<pre class='metadata'>
Title: P3283. Adding .first() and .last() to strings
Shortname: Adding .first() and .last() to strings
Level: 0
Status: iso/D
Group: wg21
URL: TBA
Editor: rhidiandewit@gmail.com
Abstract: C++ has a lot of nice utility functions in its `std::string` library, but the richness of the API can be even more improved. This proposal aims to add `.first()` and `.last()` functions to easily access the first N and last N characters of a string.
Markup Shorthands: markdown yes, css no
Boilerplate: omit conformance, copyright no
Default Highlight: cpp
</pre>

Table of Contents {#tableofcontents}
========
- [Changelog](#changelog)
	- [Revision 0](#rev0)
- [Motivation And Scope](#motivation)
	- [C++ Projects and Other Languages](#otherprojects)
	- [Similarity to std::span](#spansimilarity)
- [Impact on the Standard](#impact)
- [Design Considerations](#design)
	- [Should std::string return std::string_view](#stringreturnview)
	- [Should first() and last() be bounds-checked or throw an exception](#boundschecking)
	- [Should first() and last() be ref-qualified](#refqualified)
	- [Why not add string-slicing](#stringslicing)
- [Proposed Wording](#proposedwording)
	- <span style="font-family:Georgia, serif;">[Addition to string](#additiontostring)</span>
		- [std::string::first()](#stringfirst)
		- [std::string::last()](#stringlast)
	- <span style="font-family:Georgia, serif;">[Addition to string_view](#additiontostringview)</span>
		- [std::string_view::first()](#stringviewfirst)
		- [std::string_view::last()](#stringviewlast)

[Changelog](#changelog)
========
## Revision 0 ## {#rev0}
- Initial revision

Motivation and Scope {#motivation}
========
Getting the first and last X characters of a string is a common task and one that is possible with `substr()`, but would be made easier (and intent made clearer) with `first()` and `last()`.

## C++ Projects and Other Languages ## {#otherprojects}
Other languages and projects already include similar if not identical functionality to `first()` and `last()`.
- Unreal Engine 4 / 5: `FString::Left()` and `FString::Right()` are identical to the proposed `first()` and `last()`, returning the first X characters and last X characters, respectively.
- Python: string slicing, although far more powerful, also allows the user to easily get the first X and last X characters.
- C#: ranges operators. Similar to Python's string slicing, it allows for far more, but also accomodates very easy access to the first X and last X characters.

## Similarity to std::span ## {#spansimilarity}
`std::span` contains 2 almost identical functions to the proposed `first()` and `last()`: `std::span::first()` and `std::span::last()`, while also containing `std::span::subspan()`.
This suggests that there was enough interest for a `first()` and `last()` in `std::span`, even though `subspan()` exists.
It is only logical that `std::string` and `std::string_view` follow this logic by adding `first()` and `last()`.

Impact on the Standard {#impact}
========
These are 2 minor utility functions to be added to the `std::string` and `std::string_view` API, not impacting any existing code, so the impact on the standard is minimal.

Design Considerations {#design}
========

## Should std::string return std::string_view ## {#stringreturnview}
`first()`and `last()` should return the datatype they are a part of, e.g. `std::string::first()` and `std::string::last()` should return `std::string` while the `std::string_view` functions should return `std::string_view`.<br>
This is to keep consistency with the existing `std::string` and `std::string_view` API, which never mix and match the datatypes that are being returned.
Any potential benefit that is gained by returning std::string_view is lost when compared to the illogical change in API in `std::string`.<br>
In the case where a user would need a string_view, they could simply transform the string into a string_view, and call `first()` on that view: `std::string_view(s).first(x)`

## Should first() and last() be bounds-checked or throw an exception ## {#boundschecking}
It is best that `std::string::first()` and `std::string::last()` follow the current example set by `std::string::substr()` and `std::string_view::substr()` where the `count` parameter is defaulted to `npos` and
the `count` parameter is automatically limited to `size()`.
There is a potential benefit in throwing an exception if `count > size()`, however, the break in behaviour from the current API is more breaking and intrusive than automatically limiting the `count` parameter to `size()`.

## Should first() and last() be ref-qualified ## {#refqualified}
This is to keep consistency with `std::string::substr()` which is also ref-qualified. This also entails that `std::string_view::first()` and `std::string_view::last()` should not be ref-qualified.

## Why not add string-slicing ## {#stringslicing}
Python, C# and Rust all allow far more powerful and more convenient string manipulation in the form of string-slicing and ranges, respectively. Adding either of these features would require either a core language change,<br>
or a new binary `[]` operator, which could be useful for all containers, such as `std::vector`, which would require more work and investigation.<br>
Therefore, it is the purpose of this proposal to, for now, add 2 small utility functions, and leave such matters for a later time.

Proposed Wording {#proposedwording}
========
## Addition to `<string>` ## {#additiontostring}
Add the following to [basic.string](https://eel.is/c++draft/string.substr):<br>
```
constexpr basic_string first(size_t count) const &;
constexpr basic_string first(size_t count) &&;

constexpr basic_string last(size_t count) const &;
constexpr basic_string last(size_t count) &&;
```

## [std::string::first()] ## {#stringfirst}
Add the following to [string.substr](https://eel.is/c++draft/string.substr):<br>
```
constexpr basic_string first(size_t count) const &;
constexpr basic_string first(size_t count) &&;
```
Effects: Equivalent to: `return substr(0, count)`<br>
Effects: Equivalent to: `return std::move(*this).substr(0, count)`<br>

## [std::string::last()] ## {#stringlast}
Add the following to [string.substr](https://eel.is/c++draft/string.substr):<br>
```
constexpr basic_string last(size_t count) const &;
constexpr basic_string last(size_t count) &&;
```
Effects: Equivalent to: `return substr(size() - min(count, size()))`<br>
Effects: Equivalent to: `return std::move(*this).substr(size() - min(count, size()))`<br>

## Addition to `<string_view>` ## {#additiontostringview}
Add the following to [string.view.template](https://eel.is/c++draft/string.view.template):<br>
```
	constexpr basic_string_view first(size_t count) const;
	constexpr basic_string_view last(size_t count) const;
```

## [std::string_view::first()] ## {#stringviewfirst}
Add the following to [string.view.ops](https://eel.is/c++draft/string.view.ops):<br>
```
constexpr basic_string_view first(size_t count) const;
```
Effects: Equivalent to: `return substr(0, count)`

## [std::string_view::last()] ## {#stringviewlast}
Add the following to [string.view.ops](https://eel.is/c++draft/string.view.ops):<br>
```
constexpr basic_string_view last(size_t count) const;
```
Effects: Equivalent to: `return substr(size() - min(count, size()))`
